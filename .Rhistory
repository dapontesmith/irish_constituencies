const
const <- cbind(const, inter$row.id) %>% as_tibble(`inter$row.id` = "index")
names(const) <- c("const2017", "index")
t2 <- left_join(places, const, by = "index")
t2
View(t2)
#repeat with 2013 constituencies
bound2013 <- st_read("boundaries_2013.shp")
head(bound2013)
crs_2103 <- st_crs(bound_2013)
crs_2013 <- st_crs(bound2013)
st_crs(bound2013) == st_crs(test)
test <- st_transform(test, crs = crs_2013)
st_crs(bound2013) == st_crs(test)
inter2013 <- sf::st_intersects(test, bound2013, sparse = T) %>% as_tibble()
inter2013
unique(inter2013$col.id)
length(inter2013$col.id)
length(unique(inter2013$col.id))
bound2013$index <- seq(1,40,1)
names(bound2013)
head(bound2013)
#get vector of constituency names
constits <- (bound2013$MAX_CON_NA) %>% as_tibble()
constits
const<-NULL
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2013)) {
const[i] <- constits[inter2013$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
const
#bind the constituencies with the row ids for merging with places data
const <- cbind(const, inter2013$row.id)
const
#bind the constituencies with the row ids for merging with places data
const <- cbind(const, inter2013$row.id) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <- tibble(cbind(const, inter2013$row.id))
const
const<-NULL
#get vector of constituency names
constits <- (bound2013$MAX_CON_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2013)) {
const[i] <- constits[inter2013$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2013$row.id)
names(const) <- c("const2017", "index")
head(const)
tail(const)
names(const) <- c("const2013", "index")
t3 <- left_join(t2, const, by = "index")
head(t3, n = 50)
View(t3)
#repeat for 2007 constituencies
#repeat with 2013 constituencies
bound2007 <- st_read("Census2011_Constituencies_2007.shp")
st_crs(bound2007) == st_crs(test)
nrow(bound2007)
crs_2007 <- st_crs(bound2007)
test <- st_transform(test, crs = crs_2007)
inter2007 <- sf::st_intersects(test, bound2007, sparse = T) %>% as_tibble()
bound2007$index <- seq(1,40,1)
const<-NULL
bound2007$index <- seq(1,43,1)
head(bound2007)
#get vector of constituency names
constits <- (bound2007$NAME) %>% as_tibble()
const<-NULL
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2007)) {
const[i] <- constits[inter2007$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2007$row.id)
names(const) <- c("const2007", "index")
t4 <- left_join(t2, const, by = "index")
View(t4)
t4 <- left_join(t3, const, by = "index")
View(t4)
names(t4)
unique(t4$const90)
unique(t4$const2017)
#Also need to standardize the constituency names across the datasets to match 83-98 versions
t4$const2017[t4$const2017 == "Carlow-Kilkenny"] <- "Carlow Kilkenny"
class(t4$const2017)
#Also need to standardize the constituency names across the datasets to match 83-98 versions
t4$const2017 <- as.character(t4$const2017)
class(t4$const2017)
t4$const2017[t4$const2017 == "Carlow-Kilkenny"] <- "Carlow Kilkenny"
unique(t4$const2017) %>% as_tibble()
unique(t4$const2017) %>% as_tibble() %>% arrange(value) %>% pull(value)
unique(t4$const90) %>% as_tibble() %>% arrange(value) %>% pull(value)
unique(t4$const2013) %>% as_tibble() %>% arrange(value) %>% pull(value)
t4$const2013[t4$const2013 == "Cavan-Monaghan (4)\n"] <- "Cavan Monaghan"
unique(t4$const2013) %>% as_tibble() %>% arrange(value) %>% pull(value)
str_split(t4$const2017, "(")
str_split(t4$const2017, " (")
str_remove(t4$const2013, " (5)")
str_remove(t4$const2013, "(5)")
try <- str_remove(t4$const2013, "(5)")
str_remove(try, "()")
?str_remove
str_remove(try, "[()]")
try <- str_remove(t4$const2013, "[(5)]")
try
try <- str_remove(t4$const2013, "[(5)]")
try <- str_remove(t4$const2013, "[(5))]")
try
try <- str_remove(t4$const2013, "[(]")
try
try <- str_remove(try, "[)]")
try
try <- str_remove(t4$const2013, c("[(]","[)]"))
try <- str_remove(try, "5")
try
try <- str_remove(t4$const2013, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, "5")
try
try <- str_remove(t4$const2013, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try
try <- str_remove(t4$const2013, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 4")
try <- str_remove(try, "-")
try <- str_remove(t4$const2013, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_remove(try, "-")
try <- str_remove(try, "\n")
try
try <- str_remove(t4$const2013, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_replace(try, "-"," ")
try <- str_remove(try, "\n")
try
try <- str_remove(t4$const2013, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_replace(try, "-"," ")
try <- str_remove(try, "\n")
try <- str_remove(try, "\n")
try
t4$const2013
const_clean_func <- function(const_vec) {
try <- str_remove(const_vec, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_replace(try, "-"," ")
try <- str_remove(try, "\n")
try <- str_remove(try, "\n")
try <- str_replace(try, "Laois Offaly","Laoighis Offaly")
return(try)
}
const_clean_func(t4$const2017)
#apply function to 2017 vector
t4$const2017 <- const_clean_func(t4$const2017)
#apply to 2013 vector
t4$const2013 <- const_clean_func(t4$const2013)
t4$const2013
unique(t4$const2013)
unique(t4$const2017)
names(t4)
t4$const2007
#apply to 2007 vector
t4$const2007 <- const_clean_func(t4$const2007)
unique(t4$const2007)
unique(t4$const2013)
length(unique(t4$const2013))
unique(t4$const2013) %>% as_tibble() %>% arrange(value)
unique(t4$const2013) %>% as_tibble() %>% arrange(value) %>% pull(value)
setwd("C:/Users/dapon/Dropbox/Smith-Daponte-Smith")
dat <- read.csv("Ireland_Results_1800_2016_FINAL.csv")
dat %>% filter(elec == 2016)
dat %>% filter(elecyear == 2016)
dat %>% filter(elecyear == 2016) %>% distinct(district) %>% as_tibble() %>% arrange(value) %>% pull(value)
dat %>% filter(elecyear == 2016) %>% distinct(district) %>% as_tibble()
dat %>% filter(elecyear == 2016) %>% distinct(district) %>% as_tibble() %>% arrange(district) %>% pull(district)
unique(t4$const2013) %>% as_tibble() %>% arrange(value) %>% pull(value)
unique(bound2013$MAX_CON_NA)
setwd("C:/Users/dapon/Dropbox/Smith-Daponte-Smith/constituencies")
library(tidyverse)
library(sf)
#read in place names, which contains coordinates
places <- read_csv("IE_place_names.csv")
#eliminate NA entries
places <- places %>% filter(!is.na(latitude) & !is.na(longitude) &
!is.na(const90) & !is.na(const95) & !is.na(const98))
#create row index in places - will be used for merging with constits later
places$index <- seq(1, nrow(places), 1)
#read in 2017 district shapefile
shp <- st_read("6674493c-ac73-4998-b33c-542767be56ff2020328-1-1e1htqf.0cjo.shp")
shp_crs <- st_crs(shp)
#transform coordinates of places into sf file
test <- sf::st_as_sf(places, coords=c("longitude", "latitude"), crs = "WGS84")
#test <- test %>% st_set_crs(., shp_crs)
#test <- st_transform(test, "+proj=longlat +datum=WGS84")
test <- st_transform(test, crs = shp_crs)
#the col.id column corresponds to constituencies by their row placement in shp
inter <- sf::st_intersects(test, shp, sparse = T) %>% as_tibble()
#create index to match with the col.id column
shp$index <- seq(1,39,1)
const <- NULL
#get vector of constituency names
constits <- (shp$ENGLISH_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter)) {
const[i] <- constits[inter$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <- cbind(const, inter$row.id)
names(const) <- c("const2017", "index")
t2 <- left_join(places, const, by = "index")
#note that there are 34 rows that have values for const83 and 90 but are missing cost95 and 98 ...
#and these are all in Wicklow, which is interesting
#there are 5 rows with values for all const variables except 98, and all in Cork East
#repeat with 2013 constituencies
bound2013 <- st_read("boundaries_2013.shp")
crs_2013 <- st_crs(bound2013)
test <- st_transform(test, crs = crs_2013)
inter2013 <- sf::st_intersects(test, bound2013, sparse = T) %>% as_tibble()
bound2013$index <- seq(1,40,1)
const<-NULL
#get vector of constituency names
constits <- (bound2013$MAX_CON_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2013)) {
const[i] <- constits[inter2013$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2013$row.id)
names(const) <- c("const2013", "index")
t3 <- left_join(t2, const, by = "index")
#repeat for 2007 constituencies
#repeat with 2013 constituencies
bound2007 <- st_read("Census2011_Constituencies_2007.shp")
crs_2007 <- st_crs(bound2007)
test <- st_transform(test, crs = crs_2007)
inter2007 <- sf::st_intersects(test, bound2007, sparse = T) %>% as_tibble()
bound2007$index <- seq(1,43,1)
const<-NULL
#get vector of constituency names
constits <- (bound2007$NAME) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2007)) {
const[i] <- constits[inter2007$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2007$row.id)
names(const) <- c("const2007", "index")
t4 <- left_join(t3, const, by = "index")
unique(t4$const2013)
t4$const2013 <- as.character(t4$const2013)
t4$const2013[t4$const2013 == "Cavan-Monaghan (4)\n"] <- "Cavan Monaghan" # There's one district called "D" ... which one is that? One of the Dublins?
#write function to make cosntituency names match the 85-98 versions
const_clean_func <- function(const_vec) {
const_vec <- as.character(const_vec)
try <- str_remove(const_vec, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_replace(try, "-"," ")
try <- str_remove(try, "\n")
try <- str_remove(try, "\n")
try <- str_replace(try, "Laois Offaly","Laoighis Offaly")
try <- str_replace(try, "D","Dún Laoghaire")
return(try)
}
#apply function to 2017 vector
t4$const2017 <- const_clean_func(t4$const2017)
#apply to 2013 vector
t4$const2013 <- const_clean_func(t4$const2013)
unique(t4$const2013)
setwd("C:/Users/dapon/Dropbox/Smith-Daponte-Smith/constituencies")
library(tidyverse)
library(sf)
#read in place names, which contains coordinates
places <- read_csv("IE_place_names.csv")
#eliminate NA entries
places <- places %>% filter(!is.na(latitude) & !is.na(longitude) &
!is.na(const90) & !is.na(const95) & !is.na(const98))
#create row index in places - will be used for merging with constits later
places$index <- seq(1, nrow(places), 1)
#read in 2017 district shapefile
shp <- st_read("6674493c-ac73-4998-b33c-542767be56ff2020328-1-1e1htqf.0cjo.shp")
shp_crs <- st_crs(shp)
#transform coordinates of places into sf file
test <- sf::st_as_sf(places, coords=c("longitude", "latitude"), crs = "WGS84")
#test <- test %>% st_set_crs(., shp_crs)
#test <- st_transform(test, "+proj=longlat +datum=WGS84")
test <- st_transform(test, crs = shp_crs)
#the col.id column corresponds to constituencies by their row placement in shp
inter <- sf::st_intersects(test, shp, sparse = T) %>% as_tibble()
#create index to match with the col.id column
shp$index <- seq(1,39,1)
const <- NULL
#get vector of constituency names
constits <- (shp$ENGLISH_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter)) {
const[i] <- constits[inter$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <- cbind(const, inter$row.id)
names(const) <- c("const2017", "index")
t2 <- left_join(places, const, by = "index")
#note that there are 34 rows that have values for const83 and 90 but are missing cost95 and 98 ...
#and these are all in Wicklow, which is interesting
#there are 5 rows with values for all const variables except 98, and all in Cork East
#repeat with 2013 constituencies
bound2013 <- st_read("boundaries_2013.shp")
crs_2013 <- st_crs(bound2013)
test <- st_transform(test, crs = crs_2013)
inter2013 <- sf::st_intersects(test, bound2013, sparse = T) %>% as_tibble()
bound2013$index <- seq(1,40,1)
const<-NULL
#get vector of constituency names
constits <- (bound2013$MAX_CON_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2013)) {
const[i] <- constits[inter2013$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2013$row.id)
names(const) <- c("const2013", "index")
t3 <- left_join(t2, const, by = "index")
#repeat for 2007 constituencies
#repeat with 2013 constituencies
bound2007 <- st_read("Census2011_Constituencies_2007.shp")
crs_2007 <- st_crs(bound2007)
test <- st_transform(test, crs = crs_2007)
inter2007 <- sf::st_intersects(test, bound2007, sparse = T) %>% as_tibble()
bound2007$index <- seq(1,43,1)
const<-NULL
#get vector of constituency names
constits <- (bound2007$NAME) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2007)) {
const[i] <- constits[inter2007$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2007$row.id)
names(const) <- c("const2007", "index")
t4 <- left_join(t3, const, by = "index")
unique(t4$const2007)
unique(t4$const2013)
unique(t4$const2017)
t4$const2013 <- as.character(t4$const2013)
t4$const2013[t4$const2013 == "Cavan-Monaghan (4)\n"] <- "Cavan Monaghan" # There's one district called "D" ... which one is that? One of the Dublins?
t4$const2017 <- as.character(t4$const2017)
t4$const2017[t4$const2017 == "D"] <- "Dún Laoghaire"
#write function to make cosntituency names match the 85-98 versions
const_clean_func <- function(const_vec) {
const_vec <- as.character(const_vec)
try <- str_remove(const_vec, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_replace(try, "-"," ")
try <- str_remove(try, "\n")
try <- str_remove(try, "\n")
try <- str_replace(try, "Laois Offaly","Laoighis Offaly")
return(try)
}
#apply function to 2017 vector
t4$const2017 <- const_clean_func(t4$const2017)
#apply to 2013 vector
t4$const2013 <- const_clean_func(t4$const2013)
#apply to 2007 vector
t4$const2007 <- const_clean_func(t4$const2007)
t4$const2017
unique(t4$const2013)
dat %>% filter(elecyear == 2016) %>% distinct(district) %>% arrange(district) %>% pull(district)
unique(t4$const2013) %>% as_tibble() %>% arrange(value) %>% pull(value)
#apply to 2007 vector
t4$const2007 <- const_clean_func(t4$const2007)
unique(t4$const2007) %>% as_tibble() %>% arrange(value) %>% pull(value)
names(places)
unique(t4$const2007)
setwd("C:/Users/dapon/Dropbox/Smith-Daponte-Smith/constituencies")
library(tidyverse)
library(sf)
#read in place names, which contains coordinates
places <- read_csv("IE_place_names.csv")
#eliminate NA entries
places <- places %>% filter(!is.na(latitude) & !is.na(longitude) &
!is.na(const90) & !is.na(const95) & !is.na(const98))
#create row index in places - will be used for merging with constits later
places$index <- seq(1, nrow(places), 1)
#read in 2017 district shapefile
shp <- st_read("6674493c-ac73-4998-b33c-542767be56ff2020328-1-1e1htqf.0cjo.shp")
shp_crs <- st_crs(shp)
#transform coordinates of places into sf file
test <- sf::st_as_sf(places, coords=c("longitude", "latitude"), crs = "WGS84")
#test <- test %>% st_set_crs(., shp_crs)
#test <- st_transform(test, "+proj=longlat +datum=WGS84")
test <- st_transform(test, crs = shp_crs)
#the col.id column corresponds to constituencies by their row placement in shp
inter <- sf::st_intersects(test, shp, sparse = T) %>% as_tibble()
#create index to match with the col.id column
shp$index <- seq(1,39,1)
const <- NULL
#get vector of constituency names
constits <- (shp$ENGLISH_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter)) {
const[i] <- constits[inter$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <- cbind(const, inter$row.id)
names(const) <- c("const2017", "index")
t2 <- left_join(places, const, by = "index")
#note that there are 34 rows that have values for const83 and 90 but are missing cost95 and 98 ...
#and these are all in Wicklow, which is interesting
#there are 5 rows with values for all const variables except 98, and all in Cork East
#repeat with 2013 constituencies
bound2013 <- st_read("boundaries_2013.shp")
crs_2013 <- st_crs(bound2013)
test <- st_transform(test, crs = crs_2013)
inter2013 <- sf::st_intersects(test, bound2013, sparse = T) %>% as_tibble()
bound2013$index <- seq(1,40,1)
const<-NULL
#get vector of constituency names
constits <- (bound2013$MAX_CON_NA) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2013)) {
const[i] <- constits[inter2013$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2013$row.id)
names(const) <- c("const2013", "index")
t3 <- left_join(t2, const, by = "index")
#repeat for 2007 constituencies
#repeat with 2013 constituencies
bound2007 <- st_read("Census2011_Constituencies_2007.shp")
crs_2007 <- st_crs(bound2007)
test <- st_transform(test, crs = crs_2007)
inter2007 <- sf::st_intersects(test, bound2007, sparse = T) %>% as_tibble()
bound2007$index <- seq(1,43,1)
const<-NULL
#get vector of constituency names
constits <- (bound2007$NAME) %>% as_tibble()
#loop through inter$col.id to match the numbers to constituency names
for( i in 1:nrow(inter2007)) {
const[i] <- constits[inter2007$col.id[i],]
}
const <- unlist(const) %>% as_tibble()
#bind the constituencies with the row ids for merging with places data
const <-cbind(const, inter2007$row.id)
names(const) <- c("const2007", "index")
t4 <- left_join(t3, const, by = "index")
#Also need to standardize the constituency names across the datasets to match 83-98 versions
t4$const2013 <- as.character(t4$const2013)
t4$const2013[t4$const2013 == "Cavan-Monaghan (4)\n"] <- "Cavan Monaghan" # There's one district called "D" ... which one is that? One of the Dublins?
t4$const2017 <- as.character(t4$const2017)
t4$const2017[t4$const2017 == "D"] <- "Dún Laoghaire"
#write function to make cosntituency names match the 85-98 versions
const_clean_func <- function(const_vec) {
const_vec <- as.character(const_vec)
try <- str_remove(const_vec, "[(]")
try <- str_remove(try, "[)]")
try <- str_remove(try, " 5")
try <- str_remove(try, " 4")
try <- str_remove(try, " 3")
try <- str_replace(try, "-"," ")
try <- str_remove(try, "\n")
try <- str_remove(try, "\n")
try <- str_replace(try, "Laois Offaly","Laoighis Offaly")
return(try)
}
#apply function to 2017 vector
t4$const2017 <- const_clean_func(t4$const2017)
#apply to 2013 vector
t4$const2013 <- const_clean_func(t4$const2013)
#apply to 2007 vector
t4$const2007 <- const_clean_func(t4$const2007)
try <- str_remove(t4$const2013, c("[(]","[)]"))
try
unique(t4$const2007)
unique(t4$const83)
unique(t4$const2007) %>% as_tibble()
unique(t4$const2007) %>% as_tibble() %>% arrange(value) %>% pull(value)
unique(t4$const2013) %>% as_tibble() %>% arrange(value) %>% pull(value)
names(t4)
